plugins {
    id 'java'
    id "io.freefair.lombok" version "4.1.4"
    
    id "maven"
    id "maven-publish"
    id "com.jfrog.bintray" version "1.8.4"
    id "com.jfrog.artifactory" version "4.9.9"
    id 'com.adarshr.test-logger' version '1.6.0'
}

compileJava.options.encoding = 'UTF-8'

group = 'com.github.zakgof'
archivesBaseName = 'velvet-video'
version = '0.4.0-SNAPSHOT'
def github = 'https://github.com/zakgof/velvet-video'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	implementation 'org.slf4j:slf4j-api:2.0.0-alpha0'
    implementation 'com.github.jnr:jnr-ffi:2.1.9'
    implementation 'commons-io:commons-io:2.6'
    implementation 'com.github.zakgof:tools:0.7.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.3.1'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'com.github.zakgof:velvet-video-natives:0.2.6.full'
    testRuntimeOnly 'org.slf4j:slf4j-simple:2.0.0-alpha0'
    testRuntimeOnly 'com.github.fracpete:musicg:1.4.2.2'
    
}

repositories {
    jcenter()
}

test {
    useJUnitPlatform()
    options {
        systemProperties(System.getProperties())
    }
}

testlogger {
    showStandardStreams true
}

task fatJar(type: Jar) {
    baseName = 'velvet-video'
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

ext {
   descr = 'Java video encoding/decoding/muxing/demuxing library'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.java
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
     scm {
          connection 'scm:git:${github}.git'
          developerConnection 'scm:git:${github}.git'
          url github
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
          license {
			name 'GNU General Public License v3.0'
   			url 'https://opensource.org/licenses/GPL-3.0'
          }
        }

        developers {
          developer {
            id 'zakgof'
            name 'Oleksandr Zakusylo'
            email 'zakgof@gmail.com'
          }
        }
}

publishing {
	publications {
		MyPublication(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
  		    groupId group  		    
            artifactId archivesBaseName
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', project.descr)
                root.appendNode('name', project.archivesBaseName)
                root.appendNode('url', github + '.git')
                root.children().last() + pomConfig
            }
		}
	}
}

bintray {
    user = 'zakgof'
    key = project.hasProperty('bintrayKey') ? bintrayKey : System.getenv('BINTRAY_KEY')
    publications = ['MyPublication']
    configurations = ['archives']
    override = true
    pkg {
        repo = 'maven'
        name = archivesBaseName
        userOrg = 'zakgof'
        licenses = ['Apache-2.0', 'GPL-3.0']
        vcsUrl = github + '.git'
        version {
            name = project.version
        }
    }
}

artifactory {
    contextUrl = 'http://oss.jfrog.org'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = 'zakgof'
            password = project.hasProperty('bintrayKey') ? bintrayKey : System.getenv('BINTRAY_KEY')
        }
        defaults {
            publications('MyPublication')
            publishArtifacts = true
            publishPom = true
        }
    }
    resolve {
        repoKey = 'jcenter'
    }
    clientConfig.info.setBuildNumber('0001')
}


